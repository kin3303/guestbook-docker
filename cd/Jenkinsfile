node { 
  def app
  def commit_id
  def REGISTRY               = 'harbor.idtplateer.com'
  def HARBOR_NAMESPACE       = 'guestbook'
  def APP_NAME               = 'gb-frontend'
  def HARBOR_CREDENTIAL_NAME = 'harbor-id'
 
  stage('preparation') {
    checkout scm
    sh "git rev-parse --short HEAD > .git/commit-id"
    commit_id = readFile('.git/commit-id').trim()
  }

  stage('helm chart searching from registry') {
    withCredentials([usernamePassword(credentialsId: "$HARBOR_CREDENTIAL_NAME", passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
      sh "helm repo add guestbook-repo https://$REGISTRY/chartrepo/guestbook --username=${env.USERNAME} --password=${env.PASSWORD}"
      sh "mkdir guestbook-from-harbor"
      sh "cd guestbook-from-harbor"
      sh "helm repo update"
      sh "helm search repo guestbook-repo -l" 
    }
  }
  
  stage('Deploy to Dev') {
    dir("cd/dev") {
      sh "kubectl create ns dev" 
      sh "helm upgrade --install my-guestbook guestbook-repo/guestbook --version 0.1.0  --values values.yaml --namespace dev  --wait"
      input message: 'Dev deployment successful. Proceed with next step?',ok: 'Proceed', submitterParameter: 'USER_APPROVAL'
    }
  }

  stage('Clean Dev Resources') { 
    sh "helm uninstall my-guestbook -n dev"
    sh "kubectl delete pvc -l  app.kubernetes.io/instance=my-guestbook  -n dev"
    sh "kubectl delete ns dev"
  }  
  
  if (env.USER_APPROVAL == 'Proceed') {
    stage('Deploy to QA') {
      dir("cd/qa") {
        sh "kubectl create ns qa" 
        sh "helm upgrade --install my-guestbook-dev guestbook-repo/guestbook --version 0.1.0  --values values.yaml --namespace qa  --wait"
        input message: 'QA deployment successful. Proceed with next step?',ok: 'Proceed', submitterParameter: 'USER_APPROVAL'
      }
    }
  }

  stage('Clean QA Resources') { 
    sh "helm uninstall my-guestbook -n qa"
    sh "kubectl delete pvc -l  app.kubernetes.io/instance=my-guestbook -n qa"
    sh "kubectl delete ns qa"
  }    
}
